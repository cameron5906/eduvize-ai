name: Build and Deploy

on:
  push:
    branches:
      - main
    paths:
      - "src/backend/**"
      - "src/client/**"
      - "src/playground/**"
      - "src/playground-orchestrator/**"
      - "kubernetes/**"
      - "src/backend/jobs/course_generator/**"

jobs:
  build:
    name: Build and Deploy Services
    runs-on: ubuntu-latest

    env:
      REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Private Registry
        run: |
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ env.REGISTRY_NAME }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Determine Changed Services
        id: changes
        run: |
          echo "::set-output name=api::$(git diff --name-only HEAD^ HEAD | grep 'src/backend/api.Dockerfile' || true)"
          echo "::set-output name=database::$(git diff --name-only HEAD^ HEAD | grep 'src/backend/database.Dockerfile' || true)"
          echo "::set-output name=client::$(git diff --name-only HEAD^ HEAD | grep 'src/client/Dockerfile' || true)"
          echo "::set-output name=playground::$(git diff --name-only HEAD^ HEAD | grep 'src/playground/Dockerfile' || true)"
          echo "::set-output name=orchestrator::$(git diff --name-only HEAD^ HEAD | grep 'src/playground-orchestrator/Dockerfile' || true)"
          echo "::set-output name=course_generator::$(git diff --name-only HEAD^ HEAD | grep 'src/backend/jobs/course_generator' || true)"

      # Build and push the API image if changes are detected
      - name: Build and Push API Image
        if: steps.changes.outputs.api != ''
        run: |
          docker build -f src/backend/api.Dockerfile -t ${{ env.REGISTRY_NAME }}/api:latest src/backend
          docker push ${{ env.REGISTRY_NAME }}/api:latest

      # Build and push the Database image if changes are detected
      - name: Build and Push Database Image
        if: steps.changes.outputs.database != ''
        run: |
          docker build -f src/backend/database.Dockerfile -t ${{ env.REGISTRY_NAME }}/postgres:latest src/backend
          docker push ${{ env.REGISTRY_NAME }}/postgres:latest

      # Build and push the Client image with build args if changes are detected
      - name: Build and Push Client Image
        if: steps.changes.outputs.client != ''
        run: |
          docker build -f src/client/Dockerfile --build-arg MODE=prod -t ${{ env.REGISTRY_NAME }}/app:latest src/client
          docker push ${{ env.REGISTRY_NAME }}/app:latest

      # Build and push the Playground image if changes are detected
      - name: Build and Push Playground Image
        if: steps.changes.outputs.playground != ''
        run: |
          docker build -f src/playground/Dockerfile -t ${{ env.REGISTRY_NAME }}/playground-controller:latest src/playground
          docker push ${{ env.REGISTRY_NAME }}/playground-controller:latest

      # Build and push the Playground Orchestrator image if changes are detected
      - name: Build and Push Playground Orchestrator Image
        if: steps.changes.outputs.orchestrator != ''
        run: |
          docker build -f src/playground-orchestrator/Dockerfile -t ${{ env.REGISTRY_NAME }}/playground-orchestrator:latest src/playground-orchestrator
          docker push ${{ env.REGISTRY_NAME }}/playground-orchestrator:latest

      # Build and push the course_generator job image if changes are detected
      - name: Build and Push Course Generator Job Image
        if: steps.changes.outputs.course_generator != ''
        run: |
          docker build -f src/backend/jobs/Dockerfile --build-arg JOB_NAME=course_generator -t ${{ env.REGISTRY_NAME }}/course-generator:latest src/backend
          docker push ${{ env.REGISTRY_NAME }}/course-generator:latest

      - name: Helm Upgrade
        run: |
          helm upgrade --install eduvize kubernetes/eduvize \
            --values kubernetes/eduvize/values.yaml \
            --set ingress.hostname=${{ env.DOMAIN_NAME }}
