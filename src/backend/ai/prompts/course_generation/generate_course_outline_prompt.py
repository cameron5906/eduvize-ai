import logging
from ai.prompts.base_prompt import BasePrompt
from domain.dto.courses.course_plan import CoursePlanDto
from .provide_course_outline_tool import ProvideCourseOutlineTool
from ai.prompts.course_planning.get_additional_inputs_prompt import get_course_plan_description
from .models import CourseOutline

class GenerateCourseOutlinePrompt(BasePrompt):
    def setup(self) -> None:
        self.use_tool(ProvideCourseOutlineTool, force=True)
        
        self.set_system_prompt(f"""
You are an AI designed to create structured course syllabi based on user information and learning requests. Your task is to generate a syllabus outline that includes sections such as Introduction, Learning Objectives, Modules, Hands-On Practice/Assignments, Assessments, Resources, and Conclusion. Each module can optionally include a quiz at the end, if it makes sense, and each lesson can optionally include a hands-on exercise, such as coding or using a system shell in a sandbox environment, if it aligns with the learning objectives. These sections should contain placeholders or brief descriptions, as the detailed content will be generated by another system.
""")
    
    def get_outline(self, plan: CoursePlanDto, profile_text: str) -> CourseOutline:
        from ai.models.gpt_4o import GPT4o
        
        plan_text = get_course_plan_description(plan)
        
        if plan.followup_answers:
            plan_text += "\n\nFollow-up Answers:\n"
            for key, value in plan.followup_answers.items():
                if isinstance(value, list):
                    value = ", ".join(value)
                    
                plan_text += f"{key}: {value}\n"
        
        logging.info(f"Profile Text: {profile_text}")
        logging.info(f"Plan Text: {plan_text}")
        
        self.add_user_message(f"""## User Information:
{profile_text}

## Syllabus Request:
{plan_text}

## Course Structure:
Generate a detailed course syllabus outline that follows the structure:
### Modules
Modules are the main sections of the course, each focusing on a specific topic or skill set.
Modules should have a title and description of what is to be covered.
There must be at least one module in a course.
#### Lessons
Lessons are the individual sections within a module, each covering a specific aspect of the module's topic.
Lessons must have a title and a description of the learning objectives.
There must be at least one lesson in a module.
##### Sections
Sections are the subtopics within a lesson shown on the page.
A section should have a title and a description of what content should be created and should follow a linear progression from previous sections.
There must be at least one section in a lesson.

Generate the syllabus outline based on the provided information, ensuring that the inclusion of quizzes and exercises is optional and aligned with the user's learning goals.
You should leverage the schema defined in your tool to structure the syllabus effectively.
""")
#1. **Introduction**
#   - Welcome message
#   - Overview of the subject
#   - Relevance to the user’s background and goals
#2. **Learning Objectives**
#   - Key outcomes the user will achieve
#   - Alignment with the user’s motivations
#4. **Assessments**
#   - Placeholder for quizzes/tests
#   - Placeholder for project reviews
#5. **Resources**
#   - Placeholder for reading materials
#   - Placeholder for tools or libraries to be used
#6. **Conclusion**
#   - Recap of what was covered
#   - Next steps or advanced topics to explore
        
        model = GPT4o()
        model.get_responses(self)
        
        outline_call = self.get_tool_call(ProvideCourseOutlineTool)
        
        if not outline_call.result:
            raise ValueError("No course outline was generated")
        
        return outline_call.result